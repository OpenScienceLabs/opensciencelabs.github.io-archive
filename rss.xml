<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Open Science Labs</title><link>https://opensciencelabs.org/</link><description>Open Science Labs</description><atom:link href="https://opensciencelabs.org/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><copyright>Contents © 2022 &lt;a href="mailto:opensciencelabs@gmail.com"&gt;Open Science Labs Team&lt;/a&gt; </copyright><lastBuildDate>Tue, 05 Apr 2022 23:13:04 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Code Abbey una plataforma para mejorar tu habilidad en programación</title><link>https://opensciencelabs.org/blog/code-abbey-una-plataforma-mejorar-tu-habilidad-en-programacion/code-abbey-una-plataforma-mejorar-tu-habilidad-en-programacion/</link><dc:creator>Ever Vino</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="header" src="https://opensciencelabs.org/images/blog/code-abbey-una-plataforma-mejorar-tu-habilidad-en-programacion/header.png"&gt;&lt;/p&gt;
&lt;p&gt;Alguna vez te has pregundado, ¿Cómo puedo mejorar mis habilidades de programación?. Este artículo tiene la respuesta, te mostraremos una de las mejores plataformas para que puedas practicar programación resolviendo problemas.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://opensciencelabs.org/blog/code-abbey-una-plataforma-mejorar-tu-habilidad-en-programacion/code-abbey-una-plataforma-mejorar-tu-habilidad-en-programacion/"&gt;Leer más…&lt;/a&gt; (quedan 4 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>open science</category><category>programacion</category><category>recursos</category><guid>https://opensciencelabs.org/blog/code-abbey-una-plataforma-mejorar-tu-habilidad-en-programacion/code-abbey-una-plataforma-mejorar-tu-habilidad-en-programacion/</guid><pubDate>Tue, 22 Mar 2022 19:52:05 GMT</pubDate></item><item><title>Que necesitas para desarrollar en la web3</title><link>https://opensciencelabs.org/blog/0060-crypto-dev-ecosystem/que-necesitas-para-desarrollar-en-la-web3/</link><dc:creator>Alan Hurtarte</dc:creator><description>&lt;p&gt;&lt;img alt="header" src="https://opensciencelabs.org/images/blog/que-necesitas-para-desarrollar-en-la-web3/header.jpeg"&gt;&lt;/p&gt;
&lt;h2&gt;Como desarrollador, ¿Que necesito para entrar en la web3?&lt;/h2&gt;
&lt;p&gt;Si ya eres desarrollador y tienes la meta, el deseo, o simplemente la curiosidad de adentrarte en la web3, en este blog te mencionaré las tecnologías que se utilizan en el tech stack para desarrollar.&lt;/p&gt;
&lt;p&gt;Empecemos con un esquema básico, la web3, no funciona diferente de la web normal en teoría, lo que cambia es que en vez de tener un solo lugar centralizado con nuestros datos en el backend, está disperso por los nodos, ya sea directo en los smart contracts (si fuera Ethereum) o en el uso de algún servicio &lt;a href="https://web3.storage/"&gt;IPFS&lt;/a&gt;. Mientras el frontend es lo mismo que ya usas. Html, Css, JS, React, vue o cualquier otro frontend framework.&lt;/p&gt;
&lt;p&gt;Es importan destacar que la web3 no es excluyente de las tecnologías existentes. Puedes tener tu backend en nodejs, php, java, .net, python o el que prefieras y aun así interactuar con servicios web3.&lt;/p&gt;
&lt;h3&gt;Desarrollo local&lt;/h3&gt;
&lt;p&gt;Así como en la web2, tienes tu desarrollo local, ya sea con docker o con instalaciones de tu servidor en el localhost. En el web3 tenemos herramientas como &lt;a href="https://hardhat.org/"&gt;hardhat&lt;/a&gt; o &lt;a href="https://trufflesuite.com/ganache/index.html"&gt;ganache&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Backend&lt;/h3&gt;
&lt;h4&gt;Hardhat&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Hardhat logo" src="https://opensciencelabs.org/images/blog/que-necesitas-para-desarrollar-en-la-web3/hardhat.png" width="200" align="left" style="margin-right: 25px;"&gt;&lt;/p&gt;
&lt;p&gt;Es una herramienta para correr Solidity localmente. Encuentras una manera fácil para hacer deploy de tus contratos, correr tests y debuguear código en Solidity en diferentes versiones.&lt;/p&gt;
&lt;p&gt;Se corre como un paquete global de Node.js que se instala con NPM&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm install --save-dev hardhat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br clear="left"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;Ganache (Truffle Suite)&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Ganache logo" src="https://opensciencelabs.org/images/blog/que-necesitas-para-desarrollar-en-la-web3/ganache.png" width="200" align="left" style="margin-right: 25px;"&gt;&lt;/p&gt;
&lt;p&gt;Tu blockchain local en un clic. Con &lt;code&gt;Ganache&lt;/code&gt; pueden lanzar rápidamente un blockchain personal para correr tus tests, e inspeccionar el estado mientras controlas como la cadena opera.&lt;/p&gt;
&lt;p&gt;Para instalarlo se debe correr un ejecutable y se instala como cualquier otra aplicación en tu sistema.&lt;/p&gt;
&lt;p&gt;&lt;br clear="left"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;Aprende Solidity&lt;/h4&gt;
&lt;p&gt;Uso de ejemplo Solidity, pero podrías aprender cualquier otro lenguaje como &lt;a href="https://docs.solana.com/developing/on-chain-programs/developing-rust"&gt;Rust&lt;/a&gt; para programar en el blockchain de &lt;a href="https://solana.com/"&gt;solana&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Regresando a Solidity, si ya estás familiarizado con JavaScript, notaras muy familiar la sintaxis de Solidity. Es un lenguaje de tipado estático, con llaves, diseñado para desarrollar smart contracts que corren en Ethereum.&lt;/p&gt;
&lt;p&gt;Aquí un ejemplo de un contrato en Solidity, un sencillo Hello World&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;SPDX-License-Identifier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;MIT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nt"&gt;pragma&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;solidity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nt"&gt;contract&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;MyContract&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="err"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;helloWorld()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;pure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;returns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;(string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;memory)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="err"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;"Hello,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;World!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si ya has programado antes podrás encontrar las similitudes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Se declara la licencia del contrato. Recuerda que la mayoría, por no decir todos, los contratos son open source, así que cualquiera puede leer o interactuar con ellos.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Se declara la versión del compilador (&lt;code&gt;pragma solidity ^0.8.0&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Se declara el contrato como tal. Palabra reservada &lt;code&gt;contract&lt;/code&gt; y el nombre designado.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Se crea la función &lt;code&gt;helloWorld&lt;/code&gt;. Nota que después del nombre, tienen otros términos. Estos términos se llaman &lt;code&gt;modificadores de acceso&lt;/code&gt;. El &lt;code&gt;public&lt;/code&gt; se comporta como ya imaginas, el interesante y nuevo es &lt;code&gt;pure&lt;/code&gt; que indica que esta función no requiere gas para hacerla funcionar. Es solo lectura, entre otras cosas.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Como todo lenguaje tiene sus partes complejas y únicas que te invito pruebes y aprendas en su &lt;a href="https://ethereum.org/en/developers/"&gt;documentación&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Perfecto, ya tengo mi blockchain y mi contrato ¿Ahora que?&lt;/h4&gt;
&lt;p&gt;Listo, cada herramienta tiene su modo de publicar o desplegar tus contratos a tu red local.&lt;/p&gt;
&lt;p&gt;Por ejemplo, con &lt;code&gt;Hardhat&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npx hardhat compile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Con &lt;code&gt;Ganache&lt;/code&gt;, se debe usar otra herramienta de la misma familia llamada &lt;code&gt;truffle&lt;/code&gt;, y se ejecuta de la misma manera que &lt;code&gt;hardhat&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm install truffle -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y luego para compilar&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;truffle compile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Al tener tu contrato desplegado ya podrás interactuar con él, usando web3.js o ether.js. En otras palabras, ya se trata del frontend.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Frontend&lt;/h3&gt;
&lt;h4&gt;Web3 JS&lt;/h4&gt;
&lt;p&gt;&lt;img alt="web3js logo" src="https://opensciencelabs.org/images/blog/que-necesitas-para-desarrollar-en-la-web3/web3js.jpeg" width="200" align="left" style="margin-right: 25px;"&gt;&lt;/p&gt;
&lt;p&gt;Web3.js es la herramienta que maneja toda la lógica para conectarnos a nuestros smart contracts. Al compilar un contrato se genera un archivo llamado &lt;a href="https://www.quicknode.com/guides/solidity/what-is-an-abi"&gt;abi.json&lt;/a&gt;. Este archivo expone todos tus métodos públicos de tu smart contract, junto con los parámetros y tipos que espera. De esa manera tu frontend se podrá comunicar de manera exitosa con tus contratos.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;La manera en que interactuamos con ellos es por pasos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Instancias una referencia a tu archivo &lt;code&gt;abi&lt;/code&gt;. Recuerda que este es el que sabe, el cómo, cuando y donde, de la comunicación con tus contratos.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Al tener la referencia de tu &lt;code&gt;abi&lt;/code&gt;, puedes acceder por notación de objetos a tus métodos&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Importamos&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="n"&gt;abi&lt;/span&gt; &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;contrato&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;abi&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"./utils/EtherFavoriteSongs.json"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contractABI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;abi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;



&lt;span class="o"&gt;...&lt;/span&gt;



&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Obtenemos&lt;/span&gt; &lt;span class="n"&gt;la&lt;/span&gt; &lt;span class="n"&gt;referencia&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;la&lt;/span&gt; &lt;span class="n"&gt;billetera&lt;/span&gt; &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;usuario&lt;/span&gt;

&lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ethers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;providers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Web3Provider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ethereum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;signer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getSigner&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;



&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Creamos&lt;/span&gt; &lt;span class="n"&gt;una&lt;/span&gt; &lt;span class="n"&gt;nueva&lt;/span&gt; &lt;span class="n"&gt;instancia&lt;/span&gt; &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;contrato&lt;/span&gt;

&lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;favoriteSongsPortalContract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ethers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contractAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contractABI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;



&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;El&lt;/span&gt; &lt;span class="n"&gt;método&lt;/span&gt; &lt;span class="n"&gt;getTotalSongs&lt;/span&gt; &lt;span class="n"&gt;esta&lt;/span&gt; &lt;span class="n"&gt;definido&lt;/span&gt; &lt;span class="n"&gt;en&lt;/span&gt; &lt;span class="n"&gt;nuestro&lt;/span&gt; &lt;span class="n"&gt;contrato&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;solidity&lt;/span&gt;

&lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;favoriteSongsPortalContract&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getTotalSongs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así de fácil podemos conectar nuestros nuevos contratos con nuestro conocido y confiable frontend.&lt;/p&gt;
&lt;p&gt;El código completo de este ejemplo está en este &lt;a href="https://github.com/kenny08gt/ether-favorite-songs"&gt;repositorio&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Billetera (wallet)&lt;/h3&gt;
&lt;p&gt;Otra diferencia entre web2 y web3 es que el usuario se identifica con una "billetera", este es un término que no representa realmente lo que es y puede confundir a personas nuevas o que no tienen interés financiero en el blockchain. La más popular de estas herramientas es &lt;a href="https://metamask.io/"&gt;metamask&lt;/a&gt; aunque no la &lt;a href="https://moralis.io/what-is-a-web3-wallet-web3-wallets-explained/"&gt;única&lt;/a&gt;, que te deja tener una dirección hexadecimal única, y puedes generar múltiples direcciones. Cada una de estas te sirve para identificarte con aplicaciones web3. En vez de tener que hacer login con tu correo una y otra vez, solo debes conectar tu dirección (en tu billetera) y ya puedes interactuar con la web3.&lt;/p&gt;
&lt;p&gt;Estas billeteras son gratuitas (si son software) y se instalan en segundos. Puede ser usada como extensión en tu navegador o en aplicaciones individuales.&lt;/p&gt;
&lt;p&gt;Esto es fundamental para el funcionamiento de la web3. Cada interacción con el blockchain queda firmado por quien hizo la petición. Así queda todo registrado en el blockchain.&lt;/p&gt;
&lt;h3&gt;Resumen&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Necesitas una blockchain local para tu desarrollo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Necesitas Aprender un lenguaje para hacer tus contratos (Solidity, por ejemplo).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Necesitas compilar tus contratos.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Necesitas un frontend, con lo que ya sepas o aprender sobre frontend. Html, css, js, react o vue js.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Necesitas interactuar con web3.js en tu frontend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Necesitas una billetera para interactuar con tus contratos.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El ecosistema sigue creciendo aceleradamente, cada vez hay más herramientas y se van completando los vacíos. Todavía hace falta mucho product design, y desarrollo para volverlo mainstream. Hay gente que se refiere al estado actual del web3 como con los 90 en la web2. Largos tiempos de espera, a veces falla, falta de feedback al usuario. Así que si te interesa esto, puedes ser parte del futuro de la web, que hoy mismo se está construyendo.&lt;/p&gt;</description><category>crypto</category><category>developer</category><category>env</category><category>roadmap</category><category>web3</category><guid>https://opensciencelabs.org/blog/0060-crypto-dev-ecosystem/que-necesitas-para-desarrollar-en-la-web3/</guid><pubDate>Tue, 22 Mar 2022 05:00:00 GMT</pubDate></item><item><title>Crea una nube de palabras en R a partir de un documento de texto</title><link>https://opensciencelabs.org/blog/0061-r-nube-palabras/crea-una-nube-de-palabras-en-r-partir-de-un-documento-de-texto/</link><dc:creator>Ever Vino</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Crea-tu-nube-de-palabras-en-R-a-partir-de-un-documento-de-texto"&gt;Crea tu nube de palabras en R a partir de un documento de texto&lt;a class="anchor-link" href="https://opensciencelabs.org/blog/0061-r-nube-palabras/crea-una-nube-de-palabras-en-r-partir-de-un-documento-de-texto/#Crea-tu-nube-de-palabras-en-R-a-partir-de-un-documento-de-texto"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src="https://opensciencelabs.org/images/blog/crea-una-nube-de-palabras-en-r-partir-de-un-documento-de-texto/header.png" alt="Convertir un texto a Nube de palabras "&gt;&lt;/p&gt;
&lt;p&gt;Una nube de palabras o wordcloud nos sirve para visualizar la frecuencia de palabras dentro de un texto.
En este tutorial, usaremos el artículo de &lt;a href="https://es.wikipedia.org/wiki/Inteligencia_artificial"&gt;inteligencia artificial&lt;/a&gt; de Wikipedia para construir nuestra nube de palabras usando las bibliotecas &lt;code&gt;tm&lt;/code&gt; y &lt;code&gt;wordcloud&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://opensciencelabs.org/blog/0061-r-nube-palabras/crea-una-nube-de-palabras-en-r-partir-de-un-documento-de-texto/"&gt;Leer más…&lt;/a&gt; (quedan 6 minutos de lectura)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>mineria de texto</category><category>nube de palabras</category><category>r</category><category>rstudio</category><category>wordcloud</category><guid>https://opensciencelabs.org/blog/0061-r-nube-palabras/crea-una-nube-de-palabras-en-r-partir-de-un-documento-de-texto/</guid><pubDate>Tue, 01 Mar 2022 19:52:05 GMT</pubDate></item><item><title>Que es el Open Science Framework?</title><link>https://opensciencelabs.org/blog/0056-openscienceframework/que-es-el-open-science-framework/</link><dc:creator>Rainer Palm </dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="header" src="https://opensciencelabs.org/images/blog/que-es-el-open-science-framework/header.png"&gt;&lt;/p&gt;
&lt;p&gt;El Open Science Framework (OSF)&lt;a href="https://osf.io" title="Open Science Framework"&gt;1&lt;/a&gt; es un conjunto de herramientas diseñadas tanto para organizar, facilitar y mantener el proceso de vida de la investigación, como para la captura de los distintos estados que esta toma a lo largo de su realización. Mediante la creación de un "proyecto" (asociado a un DOI) y su respectiva wiki en su sitio web&lt;a href="https://osf.io" title="Open Science Framework"&gt;1&lt;/a&gt;, los usuarios son llevados a un dashboard donde podrán administrar de manera sencilla archivos, componentes ("subproyectos"), metadatos, usuarios, y demás, con su respectivo registro de actividad, que junto a un sistema de control de versiones permiten la eficaz revisión de cualquier error que se presenté.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://opensciencelabs.org/blog/0056-openscienceframework/que-es-el-open-science-framework/"&gt;Leer más…&lt;/a&gt; (quedan 3 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>open science</category><guid>https://opensciencelabs.org/blog/0056-openscienceframework/que-es-el-open-science-framework/</guid><pubDate>Mon, 19 Apr 2021 05:00:00 GMT</pubDate></item><item><title>Primeros pasos con RStudio</title><link>https://opensciencelabs.org/blog/0055-Rstudio/primeros-pasos-con-rstudio/</link><dc:creator>Anavelyz Pérez</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="header" src="https://opensciencelabs.org/images/blog/primeros-pasos-con-rstudio/header.png"&gt;&lt;/p&gt;
&lt;p&gt;RStudio es un entorno de desarrollo integrado (IDE) para el lenguaje de
programación R, el cual puedes utilizar para realizar scripts de análisis de
datos, aplicaciones web interactivas, documentos, reportes, gráficos y mucho
más. &lt;/p&gt;
&lt;iframe src="https://fast.wistia.net/embed/iframe/520zbd3tij?videoFoam=true" style="border: none;"&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://opensciencelabs.org/blog/0055-Rstudio/primeros-pasos-con-rstudio/"&gt;Leer más…&lt;/a&gt; (quedan 8 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>ide</category><category>r</category><guid>https://opensciencelabs.org/blog/0055-Rstudio/primeros-pasos-con-rstudio/</guid><pubDate>Mon, 05 Apr 2021 05:00:00 GMT</pubDate></item><item><title>Qué es el Data Version Control (DVC) y por qué es necesario que tu equipo sepa cómo utilizarlo</title><link>https://opensciencelabs.org/blog/0054-dvc/que-es-el-data-version-control-dvc-y-por-que-es-necesario-que-tu-equipo-sepa-como-utilizarlo/</link><dc:creator>Yurely Camacho</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="header" src="https://opensciencelabs.org/images/blog/que-es-el-data-version-control-dvc-y-por-que-es-necesario-que-tu-equipo-sepa-como-utilizarlo/header.png"&gt;&lt;/p&gt;
&lt;p&gt;Cuando colaboramos en proyectos que involucran un manejo y transformación
constante de conjuntos de datos y/o modelos derivados de estos, nos vemos en la
necesidad de indagar y poner en práctica técnicas que permitan tener un
control de todos los cambios realizados en ellos durante la
investigación; para lo cuál se necesitan herramientas que lo hagan
posible. Allí entra en juego el &lt;em&gt;Control de versiones de datos&lt;/em&gt; o Data
Version Control (DVC).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://opensciencelabs.org/blog/0054-dvc/que-es-el-data-version-control-dvc-y-por-que-es-necesario-que-tu-equipo-sepa-como-utilizarlo/"&gt;Leer más…&lt;/a&gt; (quedan 3 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>data</category><category>versioning</category><guid>https://opensciencelabs.org/blog/0054-dvc/que-es-el-data-version-control-dvc-y-por-que-es-necesario-que-tu-equipo-sepa-como-utilizarlo/</guid><pubDate>Mon, 22 Mar 2021 05:00:00 GMT</pubDate></item><item><title>Por qué deberías considerar a The Carpentries como una referencia para aprender ciencia de datos</title><link>https://opensciencelabs.org/blog/0052-carpentries/por-que-deberias-considerar-carpentries-como-una-referencia-para-aprender-ciencia-de-datos/</link><dc:creator>Anavelyz Pérez</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="header" src="https://opensciencelabs.org/images/blog/por-que-deberias-considerar-carpentries-como-una-referencia-para-aprender-ciencia-de-datos/header.png"&gt;&lt;/p&gt;
&lt;p&gt;Cuando estamos por aprender y comprender al máximo sobre algo en especifico es vital que tengamos fuentes de información que nos hagan este proceso más sencillo, y que ante cualquier duda que tengamos la ayuda sea oportuna.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://opensciencelabs.org/blog/0052-carpentries/por-que-deberias-considerar-carpentries-como-una-referencia-para-aprender-ciencia-de-datos/"&gt;Leer más…&lt;/a&gt; (quedan 4 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>data science</category><category>learning</category><guid>https://opensciencelabs.org/blog/0052-carpentries/por-que-deberias-considerar-carpentries-como-una-referencia-para-aprender-ciencia-de-datos/</guid><pubDate>Mon, 08 Mar 2021 06:00:00 GMT</pubDate></item><item><title>Primeros pasos con Spyder</title><link>https://opensciencelabs.org/blog/0053-spyder/primeros-pasos-con-spyder/</link><dc:creator>Yurely Camacho</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;Por Yurely Camacho&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="header" src="https://opensciencelabs.org/images/blog/primeros-pasos-con-spyder/header.png"&gt;&lt;/p&gt;
&lt;p&gt;Si haz elegido programar en Python, luego de haberlo instalado quizás te
preguntarás ¿Dónde voy a programar? Para esto necesitas un editor de
código. Existen muchas opciones de IDE (Entorno de Desarrollo Integrado)
que puedes usar, la elección dependerá de la herramienta que te haga
sentir comodidad, se adapte a tus necesidades de trabajo y, muy
importante, sea sencilla de manejar.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://opensciencelabs.org/blog/0053-spyder/primeros-pasos-con-spyder/"&gt;Leer más…&lt;/a&gt; (quedan 5 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>ide</category><guid>https://opensciencelabs.org/blog/0053-spyder/primeros-pasos-con-spyder/</guid><pubDate>Mon, 22 Feb 2021 06:00:00 GMT</pubDate></item><item><title>5 proyectos de inteligencia artificial que te sorprenderan</title><link>https://opensciencelabs.org/blog/0051-5proyectosdeinteligenciaartificial/ciencia-abierta/</link><dc:creator>Rainer Palm</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="header" src="https://opensciencelabs.org/images/blog/proyectos-de-inteligencia-artificial-que-te-sorprenderan/header.png"&gt;&lt;/p&gt;
&lt;!-- 
&lt;p align="center"&gt;
    &lt;img
     alt="An illustration of a curled up piece of paper with recipe contents on it. The items listed on it are the ones mentioned previously."
     src="/images/2022/02/header.png" /&gt;
    &lt;br /&gt;
    &lt;i&gt;Cute representation of a package recipe&lt;/i&gt;
&lt;/p&gt; --&gt;

&lt;p&gt;Una de las areas de investigación mas prometedoras de la ultima decada es sín duda la inteligencia artificial. No solamente reune una increible cantidad de regiones del conocimiento que, superficialmente, son demasiado dispares (tales como la filosofía de la mente, la psicología, la biología, la robotíca, la lógica pura, entre muchas otras), sino que también los resultados de sus publicaciones se vuelven relevantes de forma retroactiva para las areas de la ciencia de cuya historia se nutre. El estudio y la utilización de las redes neuronales y el aprendizaje automático (o machine learning) ha demostrado ser increiblemente utíl no solamente a la hora de realizar investigaciones regulares con estas tecnícas, sino también para crear nuevas herramientas de simulación y experimentación, tanto para uso científico como el particular o comercial.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://opensciencelabs.org/blog/0051-5proyectosdeinteligenciaartificial/ciencia-abierta/"&gt;Leer más…&lt;/a&gt; (quedan 5 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>artificial intelligence</category><guid>https://opensciencelabs.org/blog/0051-5proyectosdeinteligenciaartificial/ciencia-abierta/</guid><pubDate>Mon, 08 Feb 2021 06:00:00 GMT</pubDate></item><item><title>10 Plataformas que te ayudarán en la gestión de tu grupo de trabajo.</title><link>https://opensciencelabs.org/blog/0050-10herramientasgestionequipos/plataformas-que-te-ayudaran-en-la-gestion-de-tu-grupo-de-trabajo/</link><dc:creator>Mariangela Petrizzo Páez</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="header" src="https://opensciencelabs.org/images/blog/plataformas-que-te-ayudaran-en-la-gestion-de-tu-grupo-de-trabajo/header.png"&gt;&lt;/p&gt;
&lt;p&gt;El manejo de los equipos de trabajo es interés constante para Open Science Labs, porque tenemos la convicción de que un equipo de trabajo bien manejado puede crecer en conjunto y construir mejores resultados para la ciencia abierta.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://opensciencelabs.org/blog/0050-10herramientasgestionequipos/plataformas-que-te-ayudaran-en-la-gestion-de-tu-grupo-de-trabajo/"&gt;Leer más…&lt;/a&gt; (quedan 14 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>communication</category><guid>https://opensciencelabs.org/blog/0050-10herramientasgestionequipos/plataformas-que-te-ayudaran-en-la-gestion-de-tu-grupo-de-trabajo/</guid><pubDate>Sat, 23 Jan 2021 06:00:00 GMT</pubDate></item></channel></rss>